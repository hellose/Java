인터페이스 InputStream,OutputStream (바이트 기반 인풋 스트림,아웃풋 스트림)

1-1. ByteArrayInputStream
-> 메모리에 존재하는 byte 배열을 생성자로 전달
-> 전달된 byte 배열로부터 바이트값을 read하는 인풋 스트림이 된다.

read()를 통해 한바이트를 읽거나, 바이트 배열에 여러 바이트를 읽어 채워넣을 수 있다.
available()을 통해 앞으로 몇 바이트를 읽을 수 있는지 확인할 수 있다.
mark()를 통해 현재 읽을 지점을 마킹할 수 있다.
reset()을 통해 마킹 지점으로 돌아가 다시 read할 수 있다. 
 
1-2. ByteArrayOutputStream
-> 내부에 버퍼인 byte 배열이 존재한다.
-> 아웃풋 스트림에 바이트값을 write하면 버퍼에 바이트 값이 쌓인다.
-> 버퍼가 가득차면 자동으로 커지는 코드가 존재
-> 쌓였던 바이트 데이터들을 다른 바이트 배열에 쓸 수 있다.

write()를 통해 한바이트를 쓰거나, 특정 바이트 배열의 바이트 값을 버퍼에 쓸 수 있다.
writeTo()를 통해 현재 버퍼에 존재하는 모든 바이트들을 OutputStream에 write한다.

1-3. FileInputStream
생성자로 전달된 파일로부터 바이트값을 read 
skip 읽어올 바이트를 건너 뛸 수 있다.

1-4. FileOutputStream
생성자로 전달된 파일로 바이트값을 write


1-5. FilterInputStream (바이트 기반 보조 인풋 스트림의 최상위 보조 인풋 스트림) 
FilterInputStream의 모든 메서드들은 기반 스트림의 메서드를 그대로 호출한다.

protected volatile InputStream in; //멤버

protected FilterInputStream(InputStream in) { //생성자
        this.in = in;
}

public int read() throws IOException { //내부에서는 기반 인풋 스트림의 메서드를 그대로 호출한다.
        return in.read();
}


1-6. FilterOutputStream (바이트 기반 보조 아웃풋 스트림의 최상위 보조 아웃풋 스트림)
FilterInputStream처럼 기반 아웃풋 스트림 메서드를 그대로 호출함.


1-7. BufferedInputStream
read메서드 호출시 마다 하드 디스크의 입출력 비용 문제로 버퍼에 미리 값을 떙겨 놓은 뒤 버퍼의 바이트를 읽고 버퍼에서 다 읽으면 버퍼에 다시 채움

1-8. Reader 추상 클래스 (내부에 skipBuffer가 존재하는데 존재이유를 모르겠다)
1-9. CharArrayReader (인메모리 char[]에서 읽음. 바이트 기반 ByteArrayInputStream과 비슷함. available대신 ready가 존재하는 듯)





